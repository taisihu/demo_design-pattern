package com.hts.test.designpattern.observer;



//观察者模式

//关键点：

//        　　　　1、针对观察者与被观察者分别定义接口，有利于分别进行扩展。
//
//        　　　　2、重点就在被观察者的实现中：
//
//        　　　　　　（1）定义观察者集合，并定义针对集合的添加、删除操作，用于增加、删除订阅者（观察者）
//
//        　　　　　　（2）定义通知方法，用于将新情况通知给观察者用户（订阅者用户）
//
//        　　　　3、观察者中需要有个接收被观察者通知的方法。
//
//        　　如此而已！
//
//        　　观察者模式定义的是一对多的依赖关系，一个被观察者可以拥有多个观察者，并且通过接口对观察者与被观察者进行逻辑解耦，降低二者的直接耦合。
//
//        　　如此这般，想了一番之后，突然发现这种模式与桥接模式有点类似的感觉。
//
//        　　桥接模式也是拥有双方，同样是使用接口（抽象类）的方式进行解耦，使双方能够无限扩展而互不影响，其实二者还是有者明显的区别：
//
//        　　　　1、主要就是使用场景不同，桥接模式主要用于实现抽象与实现的解耦，主要目的也正是如此，为了双方的自由扩展而进行解耦，这是一种多对多的场景。观察者模式侧重于另一方面的解耦，侧重于监听方面，侧重于一对多的情况，侧重于一方发生情况，多方能获得这个情况的场景。
//
//        　　　　2、另一方面就是编码方面的不同，在观察者模式中存在许多独有的内容，如观察者集合的操作，通知的发送与接收，而在桥接模式中只是简单的接口引用。